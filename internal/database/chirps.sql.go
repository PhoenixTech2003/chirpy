// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chirps.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (id, user_id, body) 
VALUES
(
    gen_random_uuid(),
    $1,
    $2
)


RETURNING id, user_id, body
`

type CreateChirpParams struct {
	UserID uuid.NullUUID
	Body   sql.NullString
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.UserID, arg.Body)
	var i Chirp
	err := row.Scan(&i.ID, &i.UserID, &i.Body)
	return i, err
}

const deleteUserChirp = `-- name: DeleteUserChirp :exec
DELETE FROM chirps WHERE id = $1 AND user_id = $2
`

type DeleteUserChirpParams struct {
	ID     uuid.UUID
	UserID uuid.NullUUID
}

func (q *Queries) DeleteUserChirp(ctx context.Context, arg DeleteUserChirpParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserChirp, arg.ID, arg.UserID)
	return err
}

const getAllChirps = `-- name: GetAllChirps :exec
SELECT id, user_id, body FROM chirps
`

func (q *Queries) GetAllChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, getAllChirps)
	return err
}
